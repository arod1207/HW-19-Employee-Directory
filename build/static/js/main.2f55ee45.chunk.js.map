{"version":3,"sources":["components/Employees.jsx","components/SearchBar.jsx","App.js","serviceWorker.js","index.js"],"names":["Employees","props","className","src","people","picture","large","alt","name","first","last","email","phone","SearchBar","useState","employees","setEmployees","search","setSearch","useEffect","axios","get","then","res","data","results","catch","err","console","log","employeeComponent","filter","employee","toLowerCase","includes","map","key","type","placeholder","onChange","e","target","value","onClick","sort","a","b","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6RAmBeA,MAff,SAAmBC,GACf,OACI,yBAAKC,UAAU,iBACX,yBAAKC,IAAKF,EAAMG,OAAOC,QAAQC,MAAOC,IAAI,QAC1C,4BACKN,EAAMG,OAAOI,KAAKC,MADvB,IAC+BR,EAAMG,OAAOI,KAAKE,MAEjD,sCACYT,EAAMG,OAAOO,MADzB,IACgC,6BADhC,UAEYV,EAAMG,OAAOQ,SCwDtBC,MA/Df,WAAqB,MAEiBC,mBAAS,IAF1B,mBAEVC,EAFU,KAECC,EAFD,OAIWF,mBAAS,IAJpB,mBAIVG,EAJU,KAIFC,EAJE,KAOjBC,qBAAU,WACNC,IACKC,IAAI,4DACJC,MAAK,SAACC,GACHP,EAAaO,EAAIC,KAAKC,YAEzBC,OAAM,SAACC,GACJC,QAAQC,IAAIF,QAErB,CAACV,IAGJ,IAKMa,EALSf,EAAUgB,QAAO,SAACC,GAC7B,OAAOA,EAASxB,KAAKC,MAAMwB,cAAcC,SAASjB,EAAOgB,kBAI5BE,KAAI,SAAC/B,GAAD,OACjC,kBAAC,EAAD,CAAWgC,IAAKhC,EAAOI,KAAKC,MAAOL,OAAQA,OAc/C,OACI,6BACI,yBAAKF,UAAU,wBACX,wBAAIA,UAAU,SAAd,sBACA,yBAAKA,UAAU,cACX,2BACIA,UAAU,aACVmC,KAAK,OACLC,YAAY,SAEZC,SAAU,SAACC,GAAD,OAAOtB,EAAUsB,EAAEC,OAAOC,WAG5C,4BAAQxC,UAAU,kBAAkByC,QAxB7B,kBACf5B,EAAU6B,MAAK,SAAUC,EAAGC,GACxB,OAAID,EAAErC,KAAKE,KAAOoC,EAAEtC,KAAKE,MACb,EAERmC,EAAErC,KAAKE,KAAOoC,EAAEtC,KAAKE,KACd,EAEJ,OAgBH,8BAMHoB,IClDEiB,MARf,WACI,OACI,yBAAK7C,UAAU,OACX,kBAAC,EAAD,QCGQ8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.2f55ee45.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\n// brought in the props from Searchbar //\nfunction Employees(props) {\n    return (\n        <div className=\"employee-card\">\n            <img src={props.people.picture.large} alt=\"...\" />\n            <h3>\n                {props.people.name.first} {props.people.name.last}\n            </h3>\n            <h5>\n                Email: {props.people.email} <br />\n                Phone: {props.people.phone}\n            </h5>\n        </div>\n    );\n}\n\nexport default Employees;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../App.css';\n\nimport Employees from './Employees';\n\nfunction SearchBar() {\n    // setEmployees was used to get the data from the api and set the data in the employees state //\n    const [employees, setEmployees] = useState([]);\n    // setSearch was started as a empty string and used run in the input to recieve the value of the input and store it in the search //\n    const [search, setSearch] = useState('');\n\n    // useEffect was left with only the search  so the api call would only be made during a search //\n    useEffect(() => {\n        axios\n            .get('https://randomuser.me/api/?nat=us&results=20&seed=foobar')\n            .then((res) => {\n                setEmployees(res.data.results);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }, [search]);\n\n    // setup a filter method to loop through the setState from employees and then set everything to lowercase, passed in the search from setState //\n    const filter = employees.filter((employee) => {\n        return employee.name.first.toLowerCase().includes(search.toLowerCase());\n    });\n\n    // passed the filter variable into the map method then added props to render the Employee Component //\n    const employeeComponent = filter.map((people) => (\n        <Employees key={people.name.first} people={people} />\n    ));\n\n    const alphaOrder = () =>\n        employees.sort(function (a, b) {\n            if (a.name.last < b.name.last) {\n                return -1;\n            }\n            if (a.name.last > b.name.last) {\n                return 1;\n            }\n            return 0;\n        });\n\n    return (\n        <div>\n            <div className=\"jumbotron search-bar\">\n                <h1 className=\"title\">Employee Directory</h1>\n                <div className=\"form-group\">\n                    <input\n                        className=\"form-input\"\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        // created an onChange event to handle the setSearch, then setSearch passes the value to search\n                        onChange={(e) => setSearch(e.target.value)}\n                    ></input>\n                </div>\n                <button className=\"btn btn-primary\" onClick={alphaOrder}>\n                    Sort Names in Alpha Order\n                </button>\n            </div>\n\n            {/* Past in the employeeComponent variable created with the map method  */}\n            {employeeComponent}\n        </div>\n    );\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './App.css';\n\n// imported Search Bar Component //\nimport SearchBar from './components/SearchBar';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SearchBar />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}